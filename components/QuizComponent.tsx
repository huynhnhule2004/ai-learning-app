// components/QuizComponent.tsx
"use client"; // C·∫ßn thi·∫øt n·∫øu b·∫°n d√πng App Router c·ªßa Next.js
import { useState, useEffect } from 'react';
import { QuizQuestion } from '../types'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n import ƒë√∫ng
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'; // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ kh√°c
import { Button } from './ui/button'; // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ kh√°c
import { Progress } from './ui/progress'; // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ kh√°c
import { Badge } from './ui/badge'; // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ kh√°c
import { Clock, CheckCircle2, XCircle, Trophy, PlayCircle } from 'lucide-react';

interface QuizProps {
  questions: QuizQuestion[];
}

export default function QuizComponent({ questions }: QuizProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [timer, setTimer] = useState(15);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [isStarted, setIsStarted] = useState(false); // Tr·∫°ng th√°i b·∫Øt ƒë·∫ßu quiz
  const [isTimerRunning, setIsTimerRunning] = useState(false); // Tr·∫°ng th√°i ch·∫°y timer

  // Ki·ªÉm tra n·∫øu questions r·ªóng ho·∫∑c kh√¥ng ph·∫£i m·∫£ng
  if (!Array.isArray(questions) || questions.length === 0) {
    return (
      <Card className="w-full max-w-2xl mx-auto shadow-lg">
        <CardContent className="pt-6 text-center text-red-500">
          L·ªói: Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c cung c·∫•p cho Quiz.
        </CardContent>
      </Card>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;

  // X·ª≠ l√Ω ƒë·∫øm ng∆∞·ª£c - CH·ªà ch·∫°y khi ƒë√£ b·∫Øt ƒë·∫ßu v√† ƒëang ch·∫°y
  useEffect(() => {
    if (!isTimerRunning || showResult || !isStarted) return;

    const interval = setInterval(() => {
      setTimer((prev) => {
        if (prev === 1) {
          // T·ª± ƒë·ªông chuy·ªÉn khi h·∫øt gi·ªù (t·∫°m d·ª´ng timer)
          setIsTimerRunning(false);
          // ƒê√°nh d·∫•u l√† ch∆∞a ch·ªçn g√¨ (ƒë·ªÉ kh√¥ng t√≠nh ƒëi·ªÉm)
          setSelectedAnswer("TIMEOUT"); // D√πng m·ªôt gi√° tr·ªã ƒë·∫∑c bi·ªát
          setTimeout(() => handleNextQuestion(), 1500); // Ch·ªù 1.5s r·ªìi chuy·ªÉn
          return 15; // Reset cho l·∫ßn sau
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [currentQuestionIndex, showResult, isTimerRunning, isStarted]); // B·ªè handleNextQuestion ra kh·ªèi dependencies

  // B·∫Øt ƒë·∫ßu quiz
  const handleStartQuiz = () => {
    setIsStarted(true);
    setIsTimerRunning(true); // B·∫Øt ƒë·∫ßu ch·∫°y timer
    setCurrentQuestionIndex(0); // Reset v·ªÅ c√¢u ƒë·∫ßu
    setScore(0);
    setShowResult(false);
    setSelectedAnswer(null);
  };

  // X·ª≠ l√Ω qua c√¢u h·ªèi ti·∫øp theo
  const handleNextQuestion = () => {
    setSelectedAnswer(null); // Reset l·ª±a ch·ªçn
    setTimer(15); // Reset th·ªùi gian
    setIsTimerRunning(false); // D·ª´ng timer t·∫°m th·ªùi

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      // B·∫Øt ƒë·∫ßu l·∫°i timer sau 1 ch√∫t ƒë·ªÉ user ƒë·ªçc c√¢u h·ªèi
      setTimeout(() => setIsTimerRunning(true), 500);
    } else {
      setShowResult(true); // K·∫øt th√∫c quiz
    }
  };

  // X·ª≠ l√Ω khi ch·ªçn ƒë√°p √°n
  const handleAnswerClick = (option: string) => {
    if (selectedAnswer) return; // Kh√¥ng cho ch·ªçn l·∫°i

    setSelectedAnswer(option);
    setIsTimerRunning(false); // D·ª´ng timer khi ƒë√£ ch·ªçn

    if (option === currentQuestion.correctAnswer) {
      setScore(score + 1); // C·ªông ƒëi·ªÉm n·∫øu ƒë√∫ng
    }

    // Ch·ªù 1.5 gi√¢y ƒë·ªÉ xem k·∫øt qu·∫£ r·ªìi chuy·ªÉn c√¢u
    setTimeout(() => {
      handleNextQuestion();
    }, 1500);
  };

  // M√†n h√¨nh ch∆∞a b·∫Øt ƒë·∫ßu
  if (!isStarted) {
    return (
      <Card className="w-full max-w-2xl mx-auto shadow-lg">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl font-bold flex items-center justify-center gap-2">
            <Trophy className="w-8 h-8 text-yellow-500" />
            Quiz nhanh
          </CardTitle>
          <CardDescription className="text-lg mt-2">
            {questions.length} c√¢u h·ªèi ‚Ä¢ 15 gi√¢y m·ªói c√¢u
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center space-y-4">
          <p className="text-gray-600">
            H√£y ƒë·ªçc k·ªπ c√¢u h·ªèi tr∆∞·ªõc khi ch·ªçn ƒë√°p √°n. B·∫°n s·∫µn s√†ng ch∆∞a?
          </p>
          <Button
            onClick={handleStartQuiz}
            size="lg"
            className="w-full max-w-xs mx-auto flex items-center justify-center gap-2"
          >
            <PlayCircle className="w-5 h-5" />
            B·∫Øt ƒë·∫ßu Quiz
          </Button>
        </CardContent>
      </Card>
    );
  }

  // Hi·ªÉn th·ªã k·∫øt qu·∫£
  if (showResult) {
    const percentage = Math.round((score / questions.length) * 100);
    return (
      <Card className="w-full max-w-2xl mx-auto shadow-lg">
        <CardHeader className="text-center">
          <Trophy className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
          <CardTitle className="text-3xl font-bold">Ho√†n th√†nh!</CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-6">
          <div className="space-y-2">
            <p className="text-6xl font-bold text-primary">{score}/{questions.length}</p>
            <p className="text-2xl text-gray-600">{percentage}% ch√≠nh x√°c</p>
          </div>
          <Progress value={percentage} className="h-4" />
          <Badge variant={percentage >= 70 ? "default" : "destructive"} className="text-lg px-4 py-2">
            {percentage >= 70 ? "üéâ Xu·∫•t s·∫Øc!" : "üí™ C·ªë g·∫Øng th√™m nh√©!"}
          </Badge>
           {/* N√∫t ch∆°i l·∫°i */}
           <Button
            onClick={handleStartQuiz} // G·ªçi l·∫°i h√†m b·∫Øt ƒë·∫ßu
            size="lg"
            variant="outline"
            className="w-full max-w-xs mx-auto flex items-center justify-center gap-2 mt-4"
          >
            Ch∆°i l·∫°i
          </Button>
        </CardContent>
      </Card>
    );
  }

  // --- LOGIC HI·ªÇN TH·ªä ƒê√öNG/SAI CHO C√ÅC N√öT ---
  // X√°c ƒë·ªãnh variant (ki·ªÉu style) c·ªßa n√∫t d·ª±a tr√™n tr·∫°ng th√°i
  const getButtonVariant = (option: string): "default" | "destructive" | "secondary" | "outline" | "ghost" | "link" => {
    if (!selectedAnswer) return "outline"; // Ch∆∞a ch·ªçn: M·∫∑c ƒë·ªãnh
    if (option === currentQuestion.correctAnswer) return "default"; // Lu√¥n l√† 'default' (m√†u ch√≠nh) n·∫øu l√† ƒë√°p √°n ƒë√∫ng
    if (option === selectedAnswer) return "destructive"; // N·∫øu ch·ªçn sai: M√†u ƒë·ªè
    return "outline"; // C√°c ƒë√°p √°n sai kh√°c (kh√¥ng ƒë∆∞·ª£c ch·ªçn)
  };

  // X√°c ƒë·ªãnh c√°c l·ªõp CSS b·ªï sung (m√†u n·ªÅn, hi·ªáu ·ª©ng)
  const getButtonClassName = (option: string) => {
    if (!selectedAnswer) return "hover:bg-accent hover:text-accent-foreground"; // Hi·ªáu ·ª©ng hover khi ch∆∞a ch·ªçn
    if (option === currentQuestion.correctAnswer) return "bg-green-500 hover:bg-green-600 border-green-600 text-white"; // M√†u xanh l√° khi ƒë√∫ng
    if (option === selectedAnswer) return "bg-red-500 hover:bg-red-600 border-red-600 text-white"; // M√†u ƒë·ªè khi ch·ªçn sai
    return "opacity-60 cursor-not-allowed"; // L√†m m·ªù c√°c ƒë√°p √°n sai kh√°c
  };


  return (
    <Card className="w-full max-w-2xl mx-auto shadow-lg">
      <CardHeader>
        <div className="flex items-center justify-between mb-2">
          <Badge variant="secondary">
            C√¢u {currentQuestionIndex + 1}/{questions.length}
          </Badge>
          <div className="flex items-center gap-2">
            <Clock className={`w-5 h-5 ${timer <= 5 ? 'text-red-500 animate-pulse' : 'text-gray-500'}`} />
            <span className={`text-xl font-bold ${timer <= 5 ? 'text-red-500' : 'text-gray-700'}`}>
              {timer}s
            </span>
          </div>
        </div>
        <Progress value={progress} className="h-2 mb-4" />
        <CardTitle className="text-xl">{currentQuestion.question}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid gap-3">
          {currentQuestion.options.map((option, index) => (
            <Button
              key={index}
              onClick={() => handleAnswerClick(option)}
              disabled={!!selectedAnswer} // V√¥ hi·ªáu h√≥a khi ƒë√£ ch·ªçn
              variant={getButtonVariant(option)}
              // K·∫øt h·ª£p l·ªõp CSS m·∫∑c ƒë·ªãnh v√† l·ªõp t√πy ch·ªânh
              className={`w-full justify-start text-left h-auto py-4 px-6 whitespace-normal break-words transition-all duration-300 ${getButtonClassName(option)}`}
            >
              <span className="flex items-start gap-3 w-full">
                {/* V√≤ng tr√≤n ch·ªØ c√°i A, B, C, D */}
                <span className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center font-semibold mt-0.5 border
                                  ${selectedAnswer && option === currentQuestion.correctAnswer ? 'bg-white text-green-600 border-green-600' :
                                    selectedAnswer && option === selectedAnswer ? 'bg-white text-red-600 border-red-600' :
                                    'bg-gray-100 text-gray-700 border-gray-300'}`}>
                  {String.fromCharCode(65 + index)}
                </span>
                {/* N·ªôi dung ƒë√°p √°n */}
                <span className="flex-1 break-words">{option}</span>
                {/* Icon ƒê√∫ng/Sai */}
                {selectedAnswer && option === currentQuestion.correctAnswer && (
                  <CheckCircle2 className="w-5 h-5 text-white flex-shrink-0 mt-0.5" />
                )}
                {selectedAnswer && option === selectedAnswer && option !== currentQuestion.correctAnswer && (
                  <XCircle className="w-5 h-5 text-white flex-shrink-0 mt-0.5" />
                )}
              </span>
            </Button>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}